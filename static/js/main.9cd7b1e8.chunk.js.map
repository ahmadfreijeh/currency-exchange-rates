{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","fetchRates","setState","loading","state","selected","dateFilter","url","reformatedDate","getFullYear","getMonth","slice","getDate","axios","get","then","response","data","catch","error","console","log","finally","handleCurrencySelect","currency","handleDateFilter","date","clearFilter","yesterday","dt","Date","setDate","this","obj","key","hasOwnProperty","className","Spinner","SelectMenu","title","options","currencies","all","map","label","value","closeOnSelect","onSelect","item","Button","marginLeft","appearance","intent","iconBefore","onClick","onChange","maxDate","placeholderText","Heading","is","Table","Head","TextHeaderCell","Body","height","isEmpty","Object","keys","rates","keyName","i","Row","isSelectable","alert","TextCell","isNumber","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cd7b1e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SelectMenu, Button, Table, Spinner, Heading } from 'evergreen-ui';\r\nimport DatePicker from \"react-datepicker\";\r\nimport axios from 'axios';\r\nimport currencies  from './assets/currencies.json';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      data:{},\r\n      loading:false,\r\n      selected:'USD', // Initial currency\r\n      dateFilter:null,\r\n      yesterday:null\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    var dt = new Date();\r\n    dt.setDate( dt.getDate() - 1 );\r\n    this.setState({\r\n      yesterday:dt\r\n    })\r\n    \r\n    this.fetchRates()\r\n  }\r\n\r\n  fetchRates = () => {\r\n    this.setState({loading:true})\r\n\r\n    const {selected, dateFilter} =  this.state\r\n\r\n    let url = `https://api.exchangeratesapi.io/latest?base=${selected}`\r\n    if(dateFilter != null){\r\n      let reformatedDate = dateFilter.getFullYear() + '-' + (\"0\" + (dateFilter.getMonth() + 1)).slice(-2) + '-' + dateFilter.getDate()\r\n      url = `https://api.exchangeratesapi.io/${reformatedDate}?base=${selected}`\r\n    }\r\n\r\n    axios.get(url)\r\n    .then((response) => {\r\n      this.setState({data:response.data})\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    })\r\n    .finally(() => {\r\n      this.setState({loading:false})\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This function will handle selecting currencies from the dropdown menu\r\n   * @param {*} currency \r\n   */\r\n  handleCurrencySelect = (currency) => {\r\n    this.setState({ \r\n      selected: currency,\r\n    },() => {\r\n      this.fetchRates();\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This function will filter the current currency rates based on teh selected date\r\n   * @param {*} date \r\n   */\r\n  handleDateFilter = (date) => {\r\n    this.setState({ \r\n      dateFilter: date \r\n    },() => {\r\n      this.fetchRates();\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This function will clear date filter and reset teh data table to teh latest rates without date\r\n   */\r\n  clearFilter = () => {\r\n    this.setState({ \r\n      dateFilter: null \r\n    },() => {\r\n      this.fetchRates();\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * This function will be responsible of checking any object if it empty or not\r\n   * @param {*} obj \r\n   */\r\n  isEmpty(obj) {\r\n    for(var key in obj) {\r\n        if(obj.hasOwnProperty(key))\r\n            return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  render(){\r\n    const {data, loading, dateFilter, yesterday} = this.state\r\n    return (\r\n            <div className=\"container\">\r\n\r\n              {loading && <div className=\"spinner\">\r\n                <Spinner />\r\n              </div>}\r\n\r\n              {!loading && <div>\r\n                \r\n                <div>\r\n                  <SelectMenu\r\n                    title=\"Select Currency\"\r\n                    options={currencies.all.map(label => ({ label, value: label }))}\r\n                    selected={this.state.selected}\r\n                    closeOnSelect={true}\r\n                    onSelect={item => this.handleCurrencySelect(item.value)}>\r\n                    <Button>{this.state.selected || 'Select name...'}</Button>\r\n                  </SelectMenu>\r\n                  {dateFilter != null && <Button marginLeft={4} appearance=\"primary\" intent=\"warning\" iconBefore=\"filter-remove\" onClick={() => this.clearFilter()}>Reset Filter</Button>}\r\n                </div>\r\n\r\n                <div>\r\n                  <DatePicker\r\n                    selected={dateFilter}\r\n                    onChange={this.handleDateFilter}\r\n                    maxDate={yesterday}\r\n                    placeholderText=\"Date Filter\"\r\n                  />\r\n                </div>\r\n\r\n                <Heading is=\"h3\" className=\"heading\">Available Results</Heading>\r\n                <Table>\r\n                  <Table.Head>\r\n                    <Table.TextHeaderCell>\r\n                      Currency \r\n                    </Table.TextHeaderCell>\r\n                    <Table.TextHeaderCell>\r\n                      Rate\r\n                    </Table.TextHeaderCell>\r\n                  </Table.Head>\r\n                  <Table.Body height={440}>\r\n                    {!this.isEmpty(data) && Object.keys(data.rates).map((keyName, i) => (\r\n                        <Table.Row key={i} isSelectable onSelect={() => alert(keyName)}>\r\n                          <Table.TextCell>{keyName}</Table.TextCell>\r\n                          <Table.TextCell isNumber>{data.rates[keyName]}</Table.TextCell>\r\n                        </Table.Row>))}\r\n                  </Table.Body>\r\n                </Table>\r\n\r\n              </div>}\r\n             \r\n            </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}